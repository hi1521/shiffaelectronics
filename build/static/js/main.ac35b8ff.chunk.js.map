{"version":3,"sources":["logo.png","components/SideNavigation.js","components/TopNavigation.js","components/Footer.js","spare_parts_components/utils/get_current_date.js","spare_parts_components/forms/insert_product_form.jsx","spare_parts_components/insert_product.jsx","spare_parts_components/forms/insert_category_form.jsx","spare_parts_components/insert_category.jsx","spare_parts_components/all_product.jsx","spare_parts_components/Expanses/add_expanses.jsx","spare_parts_components/Expanses/all_expanses.jsx","components/Routes.js","components/RoutesWithNavigation.js","spare_parts_components/pages/login.jsx","spare_parts_components/pages/sale.jsx","spare_parts_components/pages/billInvoice/invoiceTitle.jsx","spare_parts_components/pages/billInvoice/BillTo.jsx","spare_parts_components/pages/billInvoice/InvoiceNo.jsx","spare_parts_components/pages/billInvoice/InvoiceTableHeader.jsx","spare_parts_components/pages/billInvoice/InvoiceTableRow.jsx","spare_parts_components/pages/billInvoice/InvoiceTableBlankSpace.jsx","spare_parts_components/pages/billInvoice/InvoiceTableFooter.jsx","spare_parts_components/pages/billInvoice/InvoiceItemTable.jsx","spare_parts_components/pages/billInvoice/InvoiceThankYouMsg.jsx","spare_parts_components/pages/billInvoice/invoice.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideNavigation","to","text","onClick","this","props","onLinkClick","className","logo","bg","mask","fixed","breakWidth","triggerOpening","style","transition","role","type","placeholder","name","id","icon","rSNL","topLevel","React","Component","TopNavigation","state","collapse","bind","toggle","handleToggleClickA","setState","dropdownOpen","onSideNavToggleClick","navStyle","paddingLeft","light","expand","scrolling","zIndex","key","lineHeight","marginleft","verticalAlign","cursor","color","size","href","routeName","right","flexDirection","Copyrights","logout","onLogout","axios","post","then","value","backgroundColor","target","float","gradient","rounded","width","fontWeight","marginRight","marginTop","getCurrentDate","separator","newDate","Date","date","getDate","month","getMonth","year","getFullYear","hours","getHours","mintues","getMinutes","seconds","getSeconds","InsertProductForm","productName","categoryName","productBrand","productModel","productCode","productQuantity","productSize","productColor","productPurchasePrice","productRetailPrice","productDiscountPrice","productStatus","fileToUpload","categories","addCategory","category","newCategory","componentDidMount","response","data","map","Category_Name","onAdd","Product_Name","Product_Brand","Product_Model","Product_Code","Product_Quantity","Product_Size","Product_Color","Product_PurchasePrice","Product_Retail_Price","Product_Discounted_Price","Product_Status","Product_Purchase_Date","sm","label","group","validate","onChange","event","search","options","selected","getValue","val","files","require","InsertProduct","componentWillMount","status","history","push","onInsertProduct","product","console","log","InsertCategoryForm","onNameChange","onStatusChange","md","InsertCategory","onInsertCategory","Category_Status","AllProducts","quantityComponent","index","rows","quantity","length","parseInt","margin","onQuantityChange","min","grossProfit","Profit","columns","field","sort","a","onSave","items","qty","theadColor","striped","barReverse","theadTextWhite","hover","noBottomColumns","paddingTop","fontSize","display","AddExpanses","description","amount","onDescriptionChange","e","onAmountChange","_value","AllExpanses","fourtOFour","Routes","path","exact","component","App","handleResize","windowWidth","window","innerWidth","toggleSideNav","sideNavToggled","assessLocation","location","locationString","currentPage","prevProps","nextProps","snapshot","pathname","addEventListener","removeEventListener","dynamicLeftPadding","position","LoginPage","email","password","login","onLogin","JSON","stringify","pwd","containerClass","Row","categoryComponent","productComponent","price","onDelete","haveQty","textAlign","SalePage","notSelected","validateData","SelectedProducts","SelectedCategory","customerAddress","customerCNIC","customerName","customerPhone","findIndex","onEnter","SelectedIds","SelectedPrices","SelectedQty","rowCount","subTotal","discount","total","time","lodash","range","sno","desc","rate","Product_id","itemsLength","Customer_Address","Customer_Phone","Customer_CNIC","isMounted","Items","SelectedHaveQty","products","newProduct","hasOwnProperty","prices","ids","selectedValue","onSelectedCategoryUpdate","computeSubtotal","onSelectedProductUpdate","filter","v","i","reduce","newVal","xl","getYear","disabled","disc","InvoiceTitle","styles","StyleSheet","create","titleContainer","reportTitle","letterSpacing","textTransform","title","headerContainer","billTo","paddingBottom","fontFamily","BillTo","invoice","invoiceNoContainer","justifyContent","invoiceDateContainer","invoiceDate","fontStyle","InvoiceNo","invoice_no","container","borderBottomColor","borderBottomWidth","alignItems","height","flexGrow","borderRightColor","borderRightWidth","InvoiceTableHeader","row","paddingRight","InvoiceTableRow","item","toString","toFixed","InvoiceTableBlankSpace","rowsCount","Array","fill","x","InvoiceTableFooter","Number","parseFloat","InvoiceItemsTable","tableRowsCount","tableContainer","flexWrap","borderWidth","borderColor","InvoiceThankYouMsg","Invoice","invoiceData","balance","phone","address","page","marginLeft","src","RoutesWithNavigation","Boolean","hostname","match","customHistory","createBrowserHistory","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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AAiB,cACjB,MACF,IAAK,oBACHA,EAAiB,wBACjB,MAGF,IAAK,kBACHA,EAAiB,aACjB,MACF,IAAK,YACHA,EAAiB,cACjB,MACF,IAAK,iBACHA,EAAiB,sBACjB,MACF,IAAK,kBACHA,EAAiB,aACjB,MACF,IAAK,cACHA,EAAiB,SACjB,MACF,IAAK,eACHA,EAAiB,UACjB,MACF,IAAK,YACHA,EAAiB,OACjB,MACF,IAAK,aACHA,EAAiB,QACjB,MACF,IAAK,cACHA,EAAiB,SACjB,MACF,IAAK,aACHA,EAAiB,QACjB,MACF,IAAK,aACHA,EAAiB,QACjB,MACF,IAAK,aACHA,EAAiB,QACjB,MAGF,IAAK,sBACHA,EAAiB,UACjB,MACF,IAAK,oBACHA,EAAiB,QACjB,MACF,IAAK,mBACHA,EAAiB,aACjB,MACF,IAAK,qBACHA,EAAiB,SACjB,MACF,IAAK,uBACHA,EAAiB,gBACjB,MACF,IAAK,uBACHA,EAAiB,WACjB,MACF,IAAK,uBACHA,EAAiB,WACjB,MACF,IAAK,mBACHA,EAAiB,eACjB,MACF,IAAK,mBACHA,EAAiB,wBACjB,MACF,IAAK,mBACHA,EAAiB,cACjB,MACF,IAAK,mBACHA,EAAiB,cACjB,MACF,IAAK,sBACHA,EAAiB,UACjB,MACF,IAAK,yBACHA,EAAiB,aACjB,MACF,IAAK,uBACHA,EAAiB,WACjB,MAGF,IAAK,eACHA,EAAiB,SACjB,MACF,IAAK,oBACHA,EAAiB,aACjB,MACF,IAAK,kBACHA,EAAiB,QACjB,MAGF,IAAK,gBACHA,EAAiB,eACjB,MACF,IAAK,mBACHA,EAAiB,kBACjB,MACF,IAAK,oBACHA,EAAiB,YACjB,MAGF,IAAK,eACHA,EAAiB,cACjB,MACF,IAAK,aACHA,EAAiB,kBACjB,MACF,IAAK,eACHA,EAAiB,mBACjB,MAGF,IAAK,UACHA,EAAiB,SACjB,MACF,IAAK,UACHA,EAAiB,SACjB,MACF,IAAK,UACHA,EAAiB,SACjB,MACF,IAAK,YACHA,EAAiB,WACjB,MACF,IAAK,YACHA,EAAiB,qBAIrB,EAAKvK,SAA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","file":"static/js/main.ac35b8ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.49218323.png\";","import React from \"react\";\nimport {\n  MDBSideNavLink,\n  MDBSideNavCat,\n  MDBSideNavNav,\n  MDBSideNav,\n  MDBIcon,\n} from \"mdbreact\";\n\nclass SideNavigation extends React.Component {\n  // render MDBSideNav Link\n  rSNL(to, text) {\n    return (\n      <MDBSideNavLink to={to} onClick={this.props.onLinkClick}>\n        {text}\n      </MDBSideNavLink>\n    );\n  }\n\n  render() {\n    const { onLinkClick } = this.props;\n    return (\n      <div className=\"white-skin\">\n        <MDBSideNav\n          logo=\"https://mdbootstrap.com/img/Marketing/general/logo/medium/mdb-react.png\"\n          bg=\"https://mdbootstrap.com/img/Photos/Others/sidenav4.jpg\"\n          mask=\"strong\"\n          fixed\n          breakWidth={this.props.breakWidth}\n          triggerOpening={this.props.triggerOpening}\n          style={{ transition: \"padding-left .3s\" }}\n        >\n          <form role=\"search\" className=\"search-form\">\n            <div className=\"form-group md-form mt-0 pt-1 ripple-parent\">\n              <input\n                type=\"text\"\n                placeholder=\"Search\"\n                className=\"form-control\"\n              />\n            </div>\n          </form>\n          <MDBSideNavNav>\n            <MDBSideNavCat name=\"Manage Stock\" id=\"dashboard-cat\" icon=\"boxes\">\n              {this.rSNL(\"/insertproduct\", \"Insert Product\")}\n              {this.rSNL(\"/insertcategory\", \"Insert category\")}\n              {this.rSNL(\"/allproducts\", \"All Products\")}\n            </MDBSideNavCat>\n\n            {/* <MDBSideNavCat name='Maps' id='maps-cat' icon='map'>\n              {this.rSNL('/maps/google', 'Google')}\n              {this.rSNL('/maps/full', 'Full screen map')}\n              {this.rSNL('/maps/vector', 'Vector world map')}\n            </MDBSideNavCat> */}\n            <MDBSideNavCat name=\"Expanses\" id=\"Expanses\" icon=\"money-bill-alt\">\n              {this.rSNL(\"/addexpanses\", \"Add Expanses\")}\n              {this.rSNL(\"/allexpanses\", \"All Expanses\")}\n            </MDBSideNavCat>\n\n            <MDBSideNavLink topLevel to=\"/expanses\" onClick={onLinkClick}>\n              <MDBIcon icon=\"bell mr-2\" />\n              Expanses\n            </MDBSideNavLink>\n\n            <MDBSideNavLink topLevel to=\"/modals\" onClick={onLinkClick}>\n              <MDBIcon icon=\"bolt mr-2\" />\n              Modals\n            </MDBSideNavLink>\n\n            <MDBSideNavLink topLevel to=\"/charts\" onClick={onLinkClick}>\n              <MDBIcon icon=\"chart-pie mr-2\" />\n              Charts\n            </MDBSideNavLink>\n\n            <MDBSideNavLink topLevel to=\"/calendar\" onClick={onLinkClick}>\n              <MDBIcon icon=\"calendar-check mr-2\" />\n              Calendar\n            </MDBSideNavLink>\n\n            <MDBSideNavLink topLevel to=\"/sections\" onClick={onLinkClick}>\n              <MDBIcon icon=\"th-large mr-2\" />\n              Sections\n            </MDBSideNavLink>\n          </MDBSideNavNav>\n        </MDBSideNav>\n      </div>\n    );\n  }\n}\n\nexport default SideNavigation;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  MDBNavbar,\n  MDBNavbarBrand,\n  MDBNavbarNav,\n  MDBIcon,\n} from \"mdbreact\";\n\nclass TopNavigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapse: false,\n    };\n    this.onClick = this.onClick.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.handleToggleClickA = this.handleToggleClickA.bind(this);\n  }\n\n  onClick() {\n    this.setState({\n      collapse: !this.state.collapse,\n    });\n  }\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen,\n    });\n  }\n\n  handleToggleClickA() {\n    this.props.onSideNavToggleClick();\n  }\n\n  render() {\n    const navStyle = {\n      paddingLeft: this.props.toggle ? \"16px\" : \"240px\",\n      transition: \"padding-left .3s\",\n    };\n    return (\n      <Router>\n        <MDBNavbar\n          className=\"flexible-MDBNavbar\"\n          light\n          expand=\"md\"\n          scrolling\n          fixed=\"top\"\n          style={{ zIndex: 3 }}\n        >\n          <div\n            onClick={this.handleToggleClickA}\n            key=\"sideNavToggleA\"\n            style={{\n              lineHeight: \"32px\",\n              marginleft: \"1em\",\n              verticalAlign: \"middle\",\n              cursor: \"pointer\",\n            }}\n          >\n            <MDBIcon icon=\"bars\" color=\"white\" size=\"lg\" />\n          </div>\n\n          <MDBNavbarBrand href=\"/\" style={navStyle}>\n            <strong>{this.props.routeName}</strong>\n          </MDBNavbarBrand>\n          <MDBNavbarNav\n            expand=\"sm\"\n            right\n            style={{ flexDirection: \"row\" }}\n          ></MDBNavbarNav>\n        </MDBNavbar>\n      </Router>\n    );\n  }\n}\n\nexport default TopNavigation;\n","import React,{Component} from \"react\";\nimport { MDBFooter, MDBBtn } from \"mdbreact\";\n\nimport { MDBLink } from \"mdbreact\";\nimport axios from \"axios\";\nimport {Redirect} from \"react-router\";\n\n\nclass Copyrights extends Component {\n\n    state = {\n        logout: false\n    }\n\n    onLogout = () =>{\n        axios.post(\"http://localhost/spare_parts/logout.php\")\n            .then(value => this.setState({logout: true}));\n    }\n\n    render() {\n        if (this.state.logout) return <Redirect to=\"/login\"/>;\n        return (\n            <MDBFooter\n                // className={props.className}\n                style={{...this.props.style, zIndex: 2, backgroundColor: \"transparent\"}}\n            >\n                <MDBLink to=\"/sale\" target=\"_blank\" style={{\n                    float: \"right\",\n                }}>\n                    <MDBBtn\n                        size=\"lg\"\n                        gradient=\"blue\"\n                        rounded={true}\n                        style={{\n                            width: \"150px\",\n                            fontWeight: \"bold\",\n                        }}\n                    >\n                        {/* <MDBIcon icon=\"bolt\" /> */}\n                        Sale\n                    </MDBBtn>\n                </MDBLink>\n                <MDBBtn\n                    size=\"lg\"\n                    gradient=\"blue\"\n                    rounded={true}\n                    style={{\n                        width: \"150px\",\n                        float: \"right\",\n                        marginRight: 50,\n                        marginTop: 15,\n                        fontWeight: \"bold\",\n                    }}\n                    onClick={() => this.onLogout()}\n                >\n                    Logout\n                </MDBBtn>\n            </MDBFooter>\n        );\n    }\n}\n\nexport default Copyrights;\n","const getCurrentDate = (separator = \"      \") => {\n    let newDate = new Date();\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n    let hours = newDate.getHours();\n    let mintues = newDate.getMinutes();\n    let seconds = newDate.getSeconds();\n    return `${year}/${\n        month < 10 ? `0${month}` : `${month}`\n    }/${date}${separator}${hours}:${mintues}:${seconds}`;\n};\n\nexport default getCurrentDate","import React, {Component} from \"react\";\nimport {\n    MDBBtn,\n    MDBCard,\n    MDBCardBody,\n    MDBCardHeader,\n    MDBCol,\n    MDBContainer,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBSelect,\n} from \"mdbreact\";\nimport getCurrentDate from \"../utils/get_current_date\";\nimport axios from \"axios\";\n\n\nclass InsertProductForm extends Component {\n    state = {\n        productName: \"\",\n        categoryName: \"\",\n        productBrand: \"\",\n        productModel: \"\",\n        productCode: \"\",\n        productQuantity: \"\",\n        productSize: \"\",\n        productColor: \"\",\n        productPurchasePrice: \"\",\n        productRetailPrice: \"\",\n        productDiscountPrice: \"\",\n        productStatus: \"\",\n        fileToUpload: \"\",\n        categories: [],\n    };\n\n    addCategory = (category) => {\n        let {categories} = this.state;\n        const newCategory = {text: category, value: category};\n        categories = [...categories, newCategory];\n        this.setState({categories});\n    };\n\n    componentDidMount = () => {\n        let {categories} = this.state;\n        axios\n            .post(\"http://localhost/spare_parts/show_category.php\")\n            .then((response) => {\n                    if (response.data !== \" no record found\") {\n                        response.data.map((category) => {\n                            const newCategory = {text: category.Category_Name, value: category.Category_Name};\n                            categories = [...categories, newCategory];\n                        });\n                        this.setState({categories})\n                    }\n                }\n            );\n\n    };\n\n    onAdd = () => {\n        const {onAdd} = this.props;\n        const {\n            productName,\n            categoryName,\n            productBrand,\n            productColor,\n            productSize,\n            productPurchasePrice,\n            productCode,\n            productDiscountPrice,\n            productModel,\n            productQuantity,\n            productRetailPrice,\n            productStatus,\n            fileToUpload,\n        } = this.state;\n\n        const currentTime = getCurrentDate(\" \");\n\n        let product = {\n            Product_Name: productName,\n            Category_Name: categoryName,\n            Product_Brand: productBrand,\n            Product_Model: productModel,\n            Product_Code: productCode,\n            Product_Quantity: productQuantity,\n            Product_Size: productSize,\n            Product_Color: productColor,\n            Product_PurchasePrice: productPurchasePrice,\n            Product_Retail_Price: productRetailPrice,\n            Product_Discounted_Price: productDiscountPrice,\n            Product_Status: productStatus,\n            Product_Purchase_Date: currentTime,\n            fileToUpload: fileToUpload,\n        };\n        onAdd(product);\n    };\n\n    render() {\n        return (\n            <div>\n                <MDBContainer>\n                    <MDBRow className=\"d-flex justify-content-center\">\n                        <MDBCol sm=\"12\">\n                            <MDBCard>\n                                <MDBCardBody>\n                                    <MDBCardHeader className=\"form-header blue-gradient rounded\">\n                                        <h3 className=\"my-3\">\n                                            <MDBIcon icon=\"plus-circle\"/> Insert Product\n                                        </h3>\n                                    </MDBCardHeader>\n                                    <form>\n                                        <div className=\"grey-text\">\n                                            {/*---------- Row 1 ----------*/}\n                                            <MDBRow>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Name\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({productName: event.target.value})\n                                                        }\n                                                        name=\"productName\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    {/* TODO: Convert into MDBSelect */}\n                                                    <MDBSelect\n                                                        search\n                                                        options={this.state.categories}\n                                                        selected=\"Choose your option\"\n                                                        getValue={(val) =>\n                                                            this.setState({\n                                                                categoryName: val[0],\n                                                            })\n                                                        }\n                                                        label=\"Select Category\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Brand\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productBrand: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productBrand\"\n                                                    />\n                                                </MDBCol>\n                                            </MDBRow>\n                                            {/*---------- Row 2 ----------*/}\n                                            <MDBRow>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Model\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productModel: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productModel\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Code\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productCode: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productCode\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Quantity\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productQuantity: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productQuantity\"\n                                                    />\n                                                </MDBCol>\n                                            </MDBRow>\n                                            {/*---------- Row 3 ----------*/}\n                                            <MDBRow>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Size\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productSize: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productSize\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Color\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productColor: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productColor\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Purchase Price\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productPurchasePrice: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productPurchasePrice\"\n                                                    />\n                                                </MDBCol>\n                                            </MDBRow>\n                                            {/*---------- Row 4 ----------*/}\n                                            <MDBRow>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Retail Price\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productRetailPrice: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productRetailPrice\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Discount Price\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productDiscountPrice: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productDiscountPrice\"\n                                                    />\n                                                </MDBCol>\n                                                <MDBCol sm=\"4\" className=\"mb-3\">\n                                                    <MDBInput\n                                                        label=\"Product Status\"\n                                                        group\n                                                        type=\"text\"\n                                                        validate\n                                                        onChange={(event) =>\n                                                            this.setState({\n                                                                productStatus: event.target.value,\n                                                            })\n                                                        }\n                                                        name=\"productStatus\"\n                                                    />\n                                                </MDBCol>\n                                            </MDBRow>\n                                            <MDBRow>\n                                                <input\n                                                    type=\"file\"\n                                                    onChange={(event) =>\n                                                        this.setState({\n                                                            fileToUpload: event.target.files[0],\n                                                        })\n                                                    }\n                                                />\n                                                {/* <ImageUploader\n                          withIcon={true}\n                          buttonText=\"Choose images\"\n                          singleImage={true}\n                          onChange={(picture) => console.log(picture)}\n                          imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\n                          maxFileSize={5242880}\n                          withPreview={true}\n                        /> */}\n                                            </MDBRow>\n                                        </div>\n                                        <div className=\"text-center mt-4\"/>\n                                    </form>\n                                    <MDBBtn\n                                        color=\"light-blue\"\n                                        className=\"mb-3\"\n                                        onClick={this.onAdd}\n                                    >\n                                        Add\n                                    </MDBBtn>\n                                </MDBCardBody>\n                            </MDBCard>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </div>\n        );\n    }\n}\n\nexport default InsertProductForm;\n","import React, { Component } from \"react\";\nimport InsertProductForm from \"./forms/insert_product_form\";\nimport {Redirect} from \"react-router-dom\";\nconst axios = require(\"axios\");\n\nclass InsertProduct extends Component {\n  state = {};\n\n\n  componentWillMount = () => {\n    axios.post(\"http://localhost/spare_parts/session_checker.php\")\n        .then(value => {\n          if (value.data === \"no record found\") return null;\n          else if(value.data[0].status !== '1') {\n            this.props.history.push(\"/login\");\n          }\n        })\n  }\n\n  onInsertProduct = (product) => {\n    axios\n      .post(\"http://localhost/spare_parts/insert_product.php\", product)\n      .then((response) => console.log(response));\n  };\n\n  render() {\n    return <InsertProductForm onAdd={this.onInsertProduct} />;\n  }\n}\n\nexport default InsertProduct;\n","import React, { Component } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBCard,\n  MDBCardBody,\n  MDBIcon,\n  MDBCardHeader,\n  MDBBtn,\n  MDBInput,\n} from \"mdbreact\";\n\nclass InsertCategoryForm extends Component {\n  state = {\n    name: \"\",\n    status: \"\",\n  };\n\n  onNameChange = (event) => {\n    this.setState({ name: event.target.value });\n  };\n\n  onStatusChange = (event) => {\n    this.setState({ status: event.target.value });\n  };\n\n  render() {\n    const { onAdd } = this.props;\n    let { name, status } = this.state;\n    return (\n      <div>\n        <MDBContainer>\n          <MDBRow className=\"d-flex justify-content-center\">\n            <MDBCol md=\"6\">\n              <MDBCard>\n                <MDBCardBody>\n                  <MDBCardHeader className=\"form-header blue-gradient rounded\">\n                    <h3 className=\"my-3\">\n                      <MDBIcon icon=\"plus-circle\" /> Insert Category\n                    </h3>\n                  </MDBCardHeader>\n                  <form>\n                    <div className=\"grey-text\">\n                      <MDBInput\n                        label=\"Category Name\"\n                        group\n                        type=\"text\"\n                        validate\n                        onChange={this.onNameChange}\n                      />\n                      <MDBInput\n                        label=\"Category status\"\n                        group\n                        type=\"text\"\n                        validate\n                        onChange={this.onStatusChange}\n                      />\n                    </div>\n\n                    <div className=\"text-center mt-4\">\n                      <MDBBtn\n                        color=\"light-blue\"\n                        className=\"mb-3\"\n                        onClick={() => onAdd(name, status)}\n                      >\n                        Add\n                      </MDBBtn>\n                    </div>\n                  </form>\n                </MDBCardBody>\n              </MDBCard>\n            </MDBCol>\n          </MDBRow>\n        </MDBContainer>\n      </div>\n    );\n  }\n}\n\nexport default InsertCategoryForm;\n","import React, { Component } from \"react\";\nimport InsertCategoryForm from \"./forms/insert_category_form\";\nconst axios = require(\"axios\");\n\nclass InsertCategory extends Component {\n  state = {};\n\n    componentWillMount = () => {\n        axios.post(\"http://localhost/spare_parts/session_checker.php\")\n            .then(value => {\n                if (value.data === \"no record found\") return null;\n                else if(value.data[0].status !== '1') {\n                    this.props.history.push(\"/login\");\n                }\n            })\n    }\n\n  onInsertCategory = (name, status) => {\n    axios\n      .post(\"http://localhost/spare_parts/create_category.php\", {\n        Category_Name: name,\n        Category_Status: status,\n      })\n      .then((response) => console.log(response.data));\n  };\n  render() {\n    return <InsertCategoryForm onAdd={this.onInsertCategory} />;\n  }\n}\n\nexport default InsertCategory;\n","import React, {Component} from \"react\";\nimport {MDBDataTable, MDBBtn, MDBInput, MDBRow, MDBContainer, MDBCol} from 'mdbreact';\nimport \"./all_product.css\"\nimport axios from \"axios\";\n\nclass AllProducts extends Component {\n\n\n\n    quantityComponent = (index, value = null) =>{\n        const {rows} = this.state.data;\n        const quantity = rows.length > 0 ? rows[index].Product_Quantity : parseInt(value);\n        return (\n            <div className=\"md-form\" style={{margin: 0}}>\n                <input\n                    // style={{width:\"150px\"}}\n                    type=\"number\"\n                    id={index + 1}\n                    onChange={event => this.onQuantityChange(index, event.target.value)}\n                    min={0}\n                    value={quantity}\n                    className=\"form-control\"\n                />\n            </div>\n        );\n    }\n\n    onQuantityChange = (index, value) => {\n        let quantity = 0;\n        if (value !== \"\") quantity = parseInt(value);\n        let { data, grossProfit } = this.state;\n        grossProfit -= data.rows[index].Profit;\n        data.rows[index].Product_Quantity = quantity;\n        const {\n            Product_Retail_Price,\n            Product_PurchasePrice,\n        } = data.rows[index];\n        data.rows[index].Profit = (Product_Retail_Price - Product_PurchasePrice) * quantity;\n        grossProfit += data.rows[index].Profit;\n        this.setState({data, grossProfit})\n    }\n\n    state = {\n        data: {\n            columns: [\n                {\n                    label: 'Name',\n                    field: 'Product_Name',\n                    sort: 'asc',\n                    width: 150\n                },\n                {\n                    label: 'C.Name',\n                    field: 'Category_Name',\n                    sort: 'asc',\n                    width: 270\n                },\n                {\n                    label: 'P.Brand',\n                    field: 'Product_Brand',\n                    sort: 'asc',\n                    width: 200\n                },\n                {\n                    label: 'P.Code',\n                    field: 'Product_Code',\n                    sort: 'asc',\n                    width: 100\n                },\n                {\n                    label: 'Qty',\n                    field: 'qty',\n                    sort: 'asc',\n                    width: 150\n                },\n                {\n                    label: 'R.Price',\n                    field: 'Product_Retail_Price',\n                    sort: 'asc',\n                    width: 350\n                },\n                {\n                    label: 'Profit',\n                    field: 'Profit',\n                    sort: 'asc',\n                    width: 350\n                },\n            ],\n            rows: []\n        },\n        grossProfit: 0\n    };\n\n    componentDidMount = async () => {\n        let {data, grossProfit} = this.state;\n        let rows = data.rows;\n        await axios\n            .post(\"http://localhost/spare_parts/allproducts.php\")\n            .then((response) => {\n                    response.data.map((product, index) => {\n                        const {\n                            Product_Retail_Price,\n                            Product_PurchasePrice,\n                            Product_Quantity\n                        } = product;\n                        product[\"qty\"] = this.quantityComponent(index, product.Product_Quantity);\n                        product[\"Profit\"] = (Product_Retail_Price - Product_PurchasePrice) * Product_Quantity;\n                        grossProfit += product[\"Profit\"];\n                        rows = [...rows, product];\n                    });\n                }\n            );\n        data.rows = rows;\n        this.setState({ data, grossProfit });\n    };\n\n    onSave = () =>{\n        const products = this.state.data.rows.map(value => {\n            delete value.qty;\n            return value;\n        })\n\n        const data = {\n            items: products,\n        }\n\n        console.log(data);\n        axios.post(\"http://localhost/spare_parts/update_product.php\", data)\n            .then(value => console.log(value));\n    }\n\n    render() {\n        const { grossProfit } = this.state;\n        let { columns, rows } = this.state.data;\n        if (rows.length > 0)\n            rows.map((value, index) => {\n                rows[index].qty = this.quantityComponent(index);\n                // rows[index].Product_PurchasePrice;\n                // rows[index].Product_Retail_Price;\n            })\n        return (\n                <div>\n                    <MDBDataTable\n                        // className=\"form-header blue-gradient rounded\"\n                        theadColor={\"blue-gradient\"}\n                        striped\n                        barReverse={true}\n                        theadTextWhite={true}\n                        hover\n                        noBottomColumns={true}\n                        data={{columns,rows}}\n                    />\n                    <MDBContainer style={{paddingTop: 50}}>\n                        <MDBRow className=\"d-flex justify-content-center\">\n                            <MDBCol sm={8}>\n                                <MDBBtn color={\"success\"} onClick={this.onSave}>Save</MDBBtn>\n                            </MDBCol>\n                            <MDBCol sm={4}>\n                                <span style={{fontSize:\"20px\", fontWeight:\"bold\"}}>Gross Profit: </span>\n                                <div style={{display:\"inline-block\"}}>\n                                    <h4 style={{color:\"#00C851\"}}>{ `Rs.${grossProfit}` }</h4>\n                                </div>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </div>\n        );\n    }\n}\n\nexport default AllProducts;","import React, {Component} from \"react\";\nimport {MDBBtn, MDBCard, MDBCardBody, MDBCardHeader, MDBCol, MDBContainer, MDBIcon, MDBInput, MDBRow} from \"mdbreact\";\nconst axios = require(\"axios\");\n\nclass AddExpanses extends Component{\n    state = {\n        description: \"\",\n        amount: 0,\n    }\n\n    onDescriptionChange = (e) =>{\n        this.setState({description: e.target.value})\n    }\n\n    onAmountChange = (e) => {\n        let amount;\n        const {value} = e.target;\n        if (value !== \"\") amount = parseInt(value);\n        else amount = 0\n        this.setState({amount})\n    }\n\n    onAdd = () => {\n        const { description, amount } = this.state;\n        const data = {\n             description,\n             amount,\n        }\n        axios.post(\"http://localhost/spare_parts/add_expanse.php\",data)\n            .then(_value => {\n                this.setState({\n                    description: \"\",\n                    amount: 0,\n                })\n            });\n    }\n\n    render() {\n        let { description, amount } = this.state;\n        return (\n            <div>\n                <MDBContainer>\n                    <MDBRow className=\"d-flex justify-content-center\">\n                        <MDBCol md=\"6\">\n                            <MDBCard>\n                                <MDBCardBody>\n                                    <MDBCardHeader className=\"form-header blue-gradient rounded\">\n                                        <h3 className=\"my-3\">\n                                            <MDBIcon icon=\"plus-circle\" /> Add Expanses\n                                        </h3>\n                                    </MDBCardHeader>\n                                    <form>\n                                        <div className=\"grey-text\">\n                                            <MDBInput\n                                                label=\"Expanse Description\"\n                                                group\n                                                type=\"text\"\n                                                validate\n                                                value={description}\n                                                onChange={this.onDescriptionChange}\n                                            />\n                                            <MDBInput\n                                                label=\"Amount\"\n                                                group\n                                                type=\"number\"\n                                                validate\n                                                value={amount}\n                                                onChange={this.onAmountChange}\n                                            />\n                                        </div>\n\n                                        <div className=\"text-center mt-4\">\n                                            <MDBBtn\n                                                color=\"light-blue\"\n                                                className=\"mb-3\"\n                                                onClick={this.onAdd}\n                                            >\n                                                Add\n                                            </MDBBtn>\n                                        </div>\n                                    </form>\n                                </MDBCardBody>\n                            </MDBCard>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </div>\n        );\n    }\n}\n\nexport default AddExpanses;","import React,{Component} from \"react\";\nimport {MDBBtn, MDBCol, MDBContainer, MDBDataTable, MDBRow} from \"mdbreact\";\nimport axios from \"axios\";\n\nclass AllExpanses extends Component{\n\n    componentDidMount = async () => {\n        let {data} = this.state;\n        let rows = data.rows;\n        await axios\n            .post(\"http://localhost/spare_parts/all_expanse.php\")\n            .then((response) => {\n                    response.data.map((product, index) => {\n                        rows = [...rows, product];\n                    });\n                }\n            );\n        data.rows = rows;\n        this.setState({ data });\n    };\n\n    state = {\n        data: {\n            columns: [\n                {\n                    label: '#',\n                    field: 'id',\n                    sort: 'asc',\n                    width: 100\n                },\n                {\n                    label: 'Description',\n                    field: 'Expanse_Desc',\n                    sort: 'asc',\n                    width: 500\n                },\n                {\n                    label: 'Amount',\n                    field: 'Expanse_Amount',\n                    sort: 'asc',\n                    width: 100\n                },\n                {\n                    label: 'Date',\n                    field: 'date',\n                    sort: 'asc',\n                    width: 100\n                },\n            ],\n            rows: []\n        },\n        grossProfit: 0\n    };\n\n    render() {\n        let { columns, rows } = this.state.data;\n        return (\n            <div>\n                <MDBDataTable\n                    theadColor={\"blue-gradient\"}\n                    striped\n                    barReverse={true}\n                    theadTextWhite={true}\n                    hover\n                    noBottomColumns={true}\n                    data={{columns,rows}}\n                />\n            </div>\n        );\n    }\n}\n\nexport default AllExpanses;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport InsertProduct from \"../spare_parts_components/insert_product\";\nimport InsertCategory from \"../spare_parts_components/insert_category\";\nimport AllProducts from \"../spare_parts_components/all_product\"\nimport AddExpanses from \"../spare_parts_components/Expanses/add_expanses\"\nimport AllExpanses from \"../spare_parts_components/Expanses/all_expanses\"\n\n\nconst fourtOFour = () => <h1 className=\"text-center\">Under Construction</h1>;\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/\" exact component={InsertProduct} />\n        <Route path=\"/insertproduct\" component={InsertProduct} />\n        <Route path=\"/insertcategory\" component={InsertCategory} />\n        <Route path=\"/allproducts\" component={AllProducts} />\n        <Route path=\"/addexpanses\" component={AddExpanses} />\n        <Route path=\"/allexpanses\" component={AllExpanses} />\n        <Route component={fourtOFour} />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport SideNavigation from \"./SideNavigation\";\nimport TopNavigation from \"./TopNavigation\";\nimport Copyrights from \"./Footer\";\nimport Routes from \"./Routes\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggle: false,\n      windowWidth: 0,\n      currentPage: \"\",\n      sideNavToggled: false,\n      breakWidth: 1400,\n    };\n  }\n\n  componentDidUpdate(prevProps, nextProps, snapshot) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.assessLocation(this.props.location.pathname);\n    }\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n    this.assessLocation(this.props.location.pathname);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize = () => {\n    this.setState({\n      windowWidth: window.innerWidth,\n    });\n  };\n\n  toggleSideNav = () => {\n    if (this.state.windowWidth < this.state.breakWidth) {\n      this.setState({\n        sideNavToggled: !this.state.sideNavToggled,\n      });\n    }\n  };\n\n  assessLocation = (location) => {\n    let locationString;\n    switch (location) {\n      // Manage Stock:\n      case \"/insertproduct\":\n        locationString = \"Insert Product\";\n        break;\n      case \"/insertcategory\":\n        locationString = \"Insert Category\";\n        break;\n      case \"/allproducts\":\n        locationString = \"All Products\";\n        break;\n\n      //\n      case \"/addexpanses\":\n        locationString = \"Add Expanses\";\n        break;\n      case \"/allexpanses\":\n        locationString = \"All Expanses\";\n        break;\n      case \"/pages/invoice\":\n        locationString = \"Invoice page\";\n        break;\n      case \"/pages/chat\":\n        locationString = \"Chat page\";\n        break;\n      case \"/pages/support\":\n        locationString = \"Support page\";\n        break;\n\n      // Profiles\n      case \"/profile/v1\":\n        locationString = \"Profile v.1\";\n        break;\n      case \"/profile/v2\":\n        locationString = \"Profile v.2\";\n        break;\n      case \"/profile/extended\":\n        locationString = \"Extended profile page\";\n        break;\n\n      // CSS\n      case \"/css/animations\":\n        locationString = \"Animations\";\n        break;\n      case \"/css/grid\":\n        locationString = \"Grid system\";\n        break;\n      case \"/css/utilities\":\n        locationString = \"Utilities & helpers\";\n        break;\n      case \"/css/typography\":\n        locationString = \"Typography\";\n        break;\n      case \"/css/colors\":\n        locationString = \"Colors\";\n        break;\n      case \"/css/shadows\":\n        locationString = \"Shadows\";\n        break;\n      case \"/css/code\":\n        locationString = \"Code\";\n        break;\n      case \"/css/icons\":\n        locationString = \"Icons\";\n        break;\n      case \"/css/images\":\n        locationString = \"Images\";\n        break;\n      case \"/css/masks\":\n        locationString = \"Masks\";\n        break;\n      case \"/css/hover\":\n        locationString = \"Hover\";\n        break;\n      case \"/css/media\":\n        locationString = \"Media\";\n        break;\n\n      // Components\n      case \"/components/buttons\":\n        locationString = \"Buttons\";\n        break;\n      case \"/components/cards\":\n        locationString = \"Cards\";\n        break;\n      case \"/components/list\":\n        locationString = \"List group\";\n        break;\n      case \"/components/panels\":\n        locationString = \"Panels\";\n        break;\n      case \"/components/progress\":\n        locationString = \"Progress bars\";\n        break;\n      case \"/components/tooltips\":\n        locationString = \"Tooltips\";\n        break;\n      case \"/components/popovers\":\n        locationString = \"Popovers\";\n        break;\n      case \"/components/tabs\":\n        locationString = \"Tabs & pills\";\n        break;\n      case \"/components/tags\":\n        locationString = \"Tags, labels & badges\";\n        break;\n      case \"/components/date\":\n        locationString = \"Date picker\";\n        break;\n      case \"/components/time\":\n        locationString = \"Time picker\";\n        break;\n      case \"/components/stepper\":\n        locationString = \"Stepper\";\n        break;\n      case \"/components/pagination\":\n        locationString = \"Pagination\";\n        break;\n      case \"/components/collapse\":\n        locationString = \"Collapse\";\n        break;\n\n      // Forms\n      case \"/forms/basic\":\n        locationString = \"Inputs\";\n        break;\n      case \"/forms/validation\":\n        locationString = \"Validation\";\n        break;\n      case \"/forms/extended\":\n        locationString = \"Forms\";\n        break;\n\n      // Tables\n      case \"/tables/basic\":\n        locationString = \"Tables basic\";\n        break;\n      case \"/tables/extended\":\n        locationString = \"Tables extended\";\n        break;\n      case \"/tables/datatable\":\n        locationString = \"Datatable\";\n        break;\n\n      // Maps\n      case \"/maps/google\":\n        locationString = \"Google maps\";\n        break;\n      case \"/maps/full\":\n        locationString = \"Full height map\";\n        break;\n      case \"/maps/vector\":\n        locationString = \"Vector world map\";\n        break;\n\n      // others\n      case \"/alerts\":\n        locationString = \"Alerts\";\n        break;\n      case \"/modals\":\n        locationString = \"Modals\";\n        break;\n      case \"/charts\":\n        locationString = \"Charts\";\n        break;\n      case \"/sections\":\n        locationString = \"Sections\";\n        break;\n      case \"/calendar\":\n        locationString = \"Full page calendar\";\n        break;\n      default:\n    }\n    this.setState({\n      currentPage: locationString,\n    });\n  };\n\n  render() {\n    const dynamicLeftPadding = {\n      paddingLeft:\n        this.state.windowWidth > this.state.breakWidth ? \"240px\" : \"0\",\n    };\n\n    return (\n      <div className=\"app\">\n        <div className=\"white-skin\">\n          {/* Generates the Left Nav */}\n          <SideNavigation\n            breakWidth={this.state.breakWidth}\n            style={{ transition: \"all .3s\" }}\n            triggerOpening={this.state.sideNavToggled}\n            onLinkClick={() => this.toggleSideNav()}\n          />\n        </div>\n        <div className=\"flexible-content white-skin\">\n          <TopNavigation\n            toggle={this.state.windowWidth < this.state.breakWidth}\n            onSideNavToggleClick={this.toggleSideNav}\n            routeName={this.state.currentPage}\n            className=\"white-skin\"\n          />\n          {/* Generates the Main content */}\n          <main style={{ ...dynamicLeftPadding, margin: \"8rem 6% 6rem\" }}>\n            <Routes onChange={() => this.assessLocation()} />\n          </main>\n\n          <Copyrights\n            style={{ ...dynamicLeftPadding, position: \"fixed\", width: \"100%\" }}\n            className=\"d-none d-lg-block\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\n\nimport {MDBBtn, MDBCard, MDBCardBody, MDBCol, MDBContainer, MDBInput, MDBRow,} from \"mdbreact\";\n\nconst axios = require(\"axios\");\n\nclass LoginPage extends Component {\n    state = {\n        email: \"\",\n        password: \"\",\n        login: false,\n    };\n\n\n    componentWillMount = () => {\n        axios.post(\"http://localhost/spare_parts/session_checker.php\")\n            .then(value => {\n                if (value.data === \"no record found\") return null;\n                else if(value.data[0].status === '1') {\n                    this.props.history.push(\"/\");\n                }\n            })\n    }\n\n\n    onLogin = (val) => {\n        const {email, password} = this.state;\n        axios.post(\n            \"http://localhost/spare_parts/signin.php\",\n            JSON.stringify({\n                email: email,\n            })\n        ).then((response) => {\n            const status = response.data[0].pwd === password;\n            // this.setState({email: \"\", password: \"\"});\n            if (status) {\n                axios.post(\"http://localhost/spare_parts/session_create.php\", {\n                    email: email\n                }).then(value => this.setState({login: true}))\n            }\n        });\n    };\n\n    render() {\n        if(this.state.login) this.props.history.push(\"/\");\n        const {email, password} = this.state;\n        return (\n            <MDBContainer>\n                <MDBRow>\n                    <MDBCol md=\"6\">\n                        <MDBCard>\n                            <div className=\"header pt-3 grey lighten-2\">\n                                <MDBRow className=\"d-flex justify-content-start\">\n                                    <h3 className=\"deep-grey-text mt-3 mb-4 pb-1 mx-5\">Log in</h3>\n                                </MDBRow>\n                            </div>\n                            <MDBCardBody className=\"mx-4 mt-4\">\n                                <MDBInput\n                                    label=\"Your email\"\n                                    value={email}\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    onChange={(event) =>\n                                        this.setState({email: event.target.value})\n                                    }\n                                />\n                                <MDBInput\n                                    label=\"Your password\"\n                                    value={password}\n                                    group\n                                    type=\"password\"\n                                    validate\n                                    containerClass=\"mb-0\"\n                                    onChange={(event) =>\n                                        this.setState({password: event.target.value})\n                                    }\n                                />\n                                <p className=\"font-small grey-text d-flex justify-content-end\">\n                                    Forgot\n                                    <a href=\"#\" className=\"dark-grey-text font-weight-bold ml-1\">\n                                        Password?\n                                    </a>\n                                </p>\n                                <div className=\"text-center mb-4 mt-5\">\n                                    <MDBBtn\n                                        color=\"danger\"\n                                        type=\"button\"\n                                        className=\"btn-block z-depth-2\"\n                                        onClick={() => this.onLogin(true)}\n                                    >\n                                        Log in\n                                    </MDBBtn>\n                                </div>\n                                <p className=\"font-small grey-text d-flex justify-content-center\">\n                                    Don't have an account?\n                                    <a href=\"#\" className=\"dark-grey-text font-weight-bold ml-1\">\n                                        Sign up\n                                    </a>\n                                </p>\n                            </MDBCardBody>\n                        </MDBCard>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default LoginPage;\n","import React, {Component} from \"react\";\nimport lodash from \"lodash\"\nimport SelectSearch from 'react-select-search';\nimport \"./sale.css\"\n\nimport {\n    MDBBadge,\n    MDBBtn,\n    MDBCard,\n    MDBCardBody,\n    MDBCardHeader,\n    MDBCol,\n    MDBContainer,\n    MDBDatePicker,\n    MDBIcon,\n    MDBInput,\n    MDBRow,\n    MDBTable,\n    MDBTableBody,\n    MDBTableHead,\n    MDBTimePicker\n} from \"mdbreact\";\nimport axios from \"axios\";\n\n\nconst Row = ({id, categoryComponent, productComponent, quantity, price, onDelete, haveQty}) => {\n    return (\n        <tr>\n            <td>{id}</td>\n            <td>\n                <MDBBadge color=\"red\">\n                    <MDBIcon style={{cursor:\"pointer\"}} onClick={() => onDelete(id)} icon=\"minus\" size=\"2x\" />\n                </MDBBadge>\n            </td>\n            <td>{categoryComponent(id)}</td>\n            <td>{productComponent(id)}</td>\n            <td style={{paddingTop:\"1.5rem\", textAlign:\"center\"}}>{haveQty}</td>\n            <td>{quantity(id)}</td>\n            <td>{price}</td>\n        </tr>\n    );\n}\n\n\nclass SalePage extends Component {\n    notSelected = \"Chose your option\";\n\n    validateData = () =>{\n        const {\n            SelectedProducts,\n            SelectedCategory, customerAddress,\n            customerCNIC,\n            customerName,\n            customerPhone\n        } = this.state;\n        if (SelectedCategory.findIndex(value => {return value === this.notSelected}) === 0) return false;\n        if (SelectedProducts.findIndex(value => {return value === this.notSelected}) === 0) return false;\n        if (customerName === \"\") return false;\n        if (customerPhone === \"\") return false;\n        if (customerCNIC === \"\") return false;\n        return customerAddress !== \"\";\n\n    }\n\n    componentWillMount = () => {\n        axios.post(\"http://localhost/spare_parts/session_checker.php\")\n            .then(value => {\n                if (value.data === \"no record found\") return null;\n                else if(value.data[0].status !== '1') {\n                    this.props.history.push(\"/login\");\n                }\n            })\n    }\n\n    onEnter = async () =>{\n        console.log(\"I am in the onEnter function\");\n        if (!this.validateData()) return;\n        const {\n            SelectedIds,\n            SelectedPrices,\n            SelectedQty,\n            SelectedProducts,\n            rowCount,\n            subTotal,\n            discount,\n            total,\n            customerName,\n            date,\n            time,\n            customerAddress,\n            customerPhone,\n            customerCNIC\n        } = this.state;\n\n\n\n        //    Data Format\n        // {\n        //  sno: index\n        //  dec: Product Name,\n        //  qty: 1 (Quantity)\n        //  rate: Price\n        // }\n\n        let items = lodash.range(rowCount).map(index => {\n            const qty = SelectedQty[index];\n            return {\n                sno: index, // Row No.\n                desc: SelectedProducts[index], // Product Name\n                qty: qty, // Product Quantity\n                rate: SelectedPrices[index] / qty, // Product 1 Qty Price\n                Product_id: SelectedIds[index], // Product ID\n            }\n        })\n        const data = {\n            subTotal: subTotal,\n            discount: discount,\n            total: total,\n            items: items,\n            itemsLength: items.length,\n            customerName: customerName,\n            date: date,\n            time: time,\n            Customer_Address: customerAddress,\n            Customer_Phone: customerPhone,\n            Customer_CNIC: customerCNIC,\n        };\n        // console.log(data);\n        this.props.history.push({\n            pathname: \"/invoice\",\n            data: data\n        })\n\n    }\n\n    state = {\n        isMounted: false,\n        customerName: \"\",\n        customerAddress: \"\",\n        customerPhone:\"\",\n        customerCNIC:\"\",\n        date: \"\",\n        time: \"\",\n        rowCount: 1,\n        Items: this.onEnter,\n        SelectedCategory:[this.notSelected],\n        SelectedProducts:[this.notSelected],\n        SelectedPrices:[0],\n        SelectedQty:[1],\n        SelectedIds:[\"\"],\n        SelectedHaveQty:[0],\n        subTotal: 0,\n        discount: 0,\n        total: 0,\n        categories: [\n            // {\n            //     text: \"Category Name\",\n            //     value: \"Category Value\"\n            // },\n        ],\n        products: {\n            // Data Format\n            // Category_Name: {\n            //     Product_Name: {\n            //         text: \"Product Name\",\n            //         value: \"Product Value\"\n            //         price: \"Product Price\"\n            //         id: Product_id,\n            //         qty: Product_Quantity,\n            //     },\n            // },\n        },\n    };\n\n    componentDidMount = async () => {\n        let {categories, products} = this.state;\n        await axios\n            .post(\"http://localhost/spare_parts/show_category.php\")\n            .then((response) => {\n                if (response.data !== \" no record found\") {\n                    response.data.map((category) => {\n                        const newCategory = {name: category.Category_Name, value: category.Category_Name};\n                        categories = [...categories, newCategory];\n                    });\n                }\n                }\n            );\n        await axios\n            .post(\"http://localhost/spare_parts/allproducts.php\")\n            .then((response) => {\n                    if (response.data !== \" no record found\") {\n                        response.data.map((product) => {\n\n                            const {Product_Name, Category_Name, Product_Retail_Price, id, Product_Quantity} = product;\n                            const newProduct = {}\n                            newProduct[Product_Name] = {\n                                name: Product_Name,\n                                value: Product_Name,\n                                price: parseInt(Product_Retail_Price),\n                                id: id,\n                                qty: Product_Quantity,\n\n                            };\n                            if (!products.hasOwnProperty(product.Category_Name))\n                                products[Category_Name] = newProduct;\n                            else\n                                products[Category_Name][Product_Name] = newProduct[Product_Name];\n                        });\n                    }\n                    return null;\n                }\n            );\n        this.setState({products, categories});\n        this.setState({isMounted: true});\n    };\n    onAdd = () => {\n        const {\n            rowCount,\n            SelectedCategory,\n            SelectedProducts,\n            SelectedPrices,\n            SelectedQty,\n            SelectedIds,\n            SelectedHaveQty\n        } = this.state;\n        const categories = [...SelectedCategory, this.notSelected];\n        const products = [...SelectedProducts, this.notSelected];\n        const prices = [...SelectedPrices, 0];\n        const ids = [...SelectedIds, \"None\"];\n        const qty = [...SelectedQty, 1];\n        const haveQty = [...SelectedHaveQty, 0];\n        this.setState({\n            rowCount: rowCount + 1,\n            SelectedCategory: categories,\n            SelectedProducts: products,\n            SelectedPrices: prices,\n            SelectedHaveQty: haveQty,\n            SelectedQty: qty,\n            SelectedIds: ids,\n        });\n    };\n\n    categoryComponent = (id) => {\n        const {categories, SelectedCategory} = this.state;\n        const index = id - 1;\n        return (\n            <SelectSearch options={categories} search={true} onChange={selectedValue => this.onSelectedCategoryUpdate(index, selectedValue)} value={SelectedCategory[index]} name=\"Categories\" placeholder=\"Choose your Option\" />\n        );\n    };\n\n    onSelectedCategoryUpdate = (index, selectedValue) => {\n        let {\n            isMounted,\n            discount,\n            SelectedCategory,\n        } = this.state;\n\n        if ( isMounted\n            && typeof selectedValue != \"undefined\"\n            && selectedValue !== SelectedCategory[index]\n        ) {\n            SelectedCategory[index] = selectedValue;\n            const subTotal = this.computeSubtotal();\n            const total = subTotal - discount;\n            this.setState({SelectedCategory, subTotal, total});\n        }\n    };\n\n    productComponent = (id) => {\n        const {\n            products,\n            SelectedProducts,\n            SelectedCategory\n        } = this.state;\n\n        const index = id - 1;\n        let options;\n        if (products[SelectedCategory[index]]) {\n            options = lodash.map(products[SelectedCategory[index]], function (val) {\n                return val;\n            })\n        }\n        else options = [];\n        return <SelectSearch options={options} search={true} onChange={selectedValue => this.onSelectedProductUpdate(index, selectedValue)} value={SelectedProducts[index]} name=\"Products\" placeholder=\"Choose your Option\" />\n    };\n    onSelectedProductUpdate = (index, selectedValue) => {\n        let {\n            products,\n            isMounted,\n            discount,\n            SelectedProducts,\n            SelectedCategory,\n            SelectedPrices,\n            SelectedIds,\n            SelectedHaveQty\n        } = this.state;\n        const category = SelectedCategory[index];\n\n        if (isMounted\n            && selectedValue !== this.notSelected\n            && typeof selectedValue != \"undefined\"\n            && selectedValue !== SelectedProducts[index]\n            && typeof category != 'undefined'\n        ) {\n            SelectedProducts[index] = selectedValue;\n            SelectedPrices[index] = products[category][selectedValue].price;\n            SelectedIds[index] = products[category][selectedValue].id;\n            SelectedHaveQty[index] = products[category][selectedValue].qty;\n            const subTotal = this.computeSubtotal()\n            const total = subTotal - discount;\n            this.setState({SelectedProducts, SelectedIds, SelectedPrices, SelectedHaveQty, subTotal, total});\n        }\n    };\n\n    quantityComponent = (id) =>{\n        let {\n            SelectedQty,\n            SelectedProducts,\n            SelectedCategory,\n            SelectedPrices,\n            products,\n            subTotal,\n            total,\n            discount,\n            SelectedHaveQty,\n        } = this.state;\n        const index = id - 1 ;\n\n        return(\n            <MDBInput\n                style={{marginTop:\"-1.5rem\"}}\n                label=\"Quantity\"\n                group\n                type=\"number\"\n                value={SelectedQty[index]}\n                validate\n                onChange={(event) => {\n\n                    const product = SelectedProducts[index];\n                    const category = SelectedCategory[index];\n\n                    if(event.target.value !== '' &&\n                        typeof products[category] != \"undefined\" &&\n                        typeof products[category][product] != 'undefined'\n                    ){\n                        let quantity = parseInt(event.target.value);\n                        if (quantity > SelectedHaveQty[index]) quantity = SelectedHaveQty[index];\n                        SelectedPrices[index] = products[category][product].price * quantity\n                        SelectedQty[index] = quantity;\n                        subTotal = this.computeSubtotal();\n                        total = subTotal - discount;\n                        this.setState({SelectedPrices, SelectedQty, subTotal, total});\n                    }\n\n                }}\n                name=\"productName\"\n            />\n        )\n    };\n\n    onDelete = (id) => {\n        const index = id - 1;\n\n        let {\n            SelectedProducts,\n            SelectedCategory,\n            SelectedIds,\n            SelectedQty,\n            SelectedPrices,\n            rowCount,\n            subTotal,\n            discount,\n            total,\n        } = this.state;\n        const price = SelectedPrices[index];\n        SelectedPrices = SelectedPrices.filter((v, i) => i !== index);\n        SelectedQty = SelectedQty.filter((v, i) => i !== index);\n        SelectedIds = SelectedIds.filter((v, i) => i !== index);\n        SelectedCategory = SelectedCategory.filter((v, i) => i !== index);\n        SelectedProducts = SelectedProducts.filter((v, i) => i !== index);\n        subTotal -= price\n        total = subTotal - discount;\n        this.setState({\n            SelectedProducts,\n            SelectedCategory,\n            SelectedIds,\n            SelectedQty,\n            SelectedPrices,\n            rowCount: rowCount - 1,\n            subTotal: subTotal,\n            total: total,\n        })\n    }\n\n\n    computeSubtotal = () => {\n        return this.state.SelectedPrices.reduce((val, newVal) => val + newVal)\n    }\n\n    render() {\n        const {rowCount, SelectedPrices, subTotal, total, discount, SelectedHaveQty} = this.state;\n        return (\n            <MDBContainer style={{paddingTop: 50}}>\n                <MDBRow className=\"d-flex justify-content-center\">\n                    <MDBCol size=\"12\" xl=\"12\">\n                        <MDBCard>\n                            <MDBCardBody>\n                                <MDBCardHeader className=\"form-header blue-gradient rounded\">\n                                    <h3 className=\"my-3\">\n                                        <MDBIcon icon=\"dollar-sign\"/> Sale\n                                    </h3>\n                                </MDBCardHeader>\n                                <form>\n                                    <div className=\"grey-text\">\n                                        {/*---------- Row 1 ----------*/}\n                                        <MDBRow>\n                                            <MDBCol sm=\"3\" className=\"mb-3\">\n                                                <MDBInput\n                                                    label=\"Customer Name\"\n                                                    group\n                                                    type=\"text\"\n                                                    validate\n                                                    onChange={(event) =>\n                                                        this.setState({customerName: event.target.value})\n                                                    }\n                                                    name=\"productName\"\n                                                />\n                                            </MDBCol>\n                                            <MDBCol sm=\"3\" className=\"mb-3\">\n                                                <MDBInput\n                                                    label=\"Customer Cnic\"\n                                                    group\n                                                    type=\"text\"\n                                                    validate\n                                                    onChange={(event) =>\n                                                        this.setState({customerCNIC: event.target.value})\n                                                    }\n                                                    name=\"productName\"\n                                                />\n                                            </MDBCol>\n                                            <MDBCol sm=\"3\" className=\"mb-3\">\n                                                <MDBInput\n                                                    label=\"Customer Phone\"\n                                                    group\n                                                    type=\"text\"\n                                                    validate\n                                                    onChange={(event) =>\n                                                        this.setState({customerPhone: event.target.value})\n                                                    }\n                                                    name=\"productName\"\n                                                />\n                                            </MDBCol>\n                                            <MDBCol sm=\"3\" className=\"mb-3\">\n                                                <MDBInput\n                                                    label=\"Customer Address\"\n                                                    group\n                                                    type=\"text\"\n                                                    validate\n                                                    onChange={(event) =>\n                                                        this.setState({customerAddress: event.target.value})\n                                                    }\n                                                    name=\"productName\"\n                                                />\n                                            </MDBCol>\n                                            {/*<MDBCol sm=\"1\" className=\"mb-3\"/>*/}\n                                        </MDBRow>\n                                        <MDBRow>\n                                            <MDBCol sm=\"2\" className=\"mt-2\">\n                                                <MDBDatePicker  getValue={value => this.setState(\n                                                    {date: `${value.getDate()}-${value.getMonth()}-${value.getYear()+1900}`}\n                                                )} />\n                                            </MDBCol>\n                                            {/*<MDBCol sm=\"1\"/>*/}\n                                            <MDBCol sm=\"4\" className=\"mb-3\">\n                                                <MDBTimePicker  getValue={value => this.setState({time: value})}  id={\"Time\"}/>\n                                            </MDBCol>\n                                            <MDBCol sm=\"3\">\n                                                <MDBBtn color=\"red\" onClick={() => this.onAdd()}>\n                                                    Add\n                                                </MDBBtn>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow>\n                                            <MDBCol>\n                                                <MDBTable>\n                                                    <MDBTableHead>\n                                                        <tr>\n                                                            <th>#</th>\n                                                            <th/>\n                                                            <th>Category</th>\n                                                            <th>Product</th>\n                                                            <th>HaveQty</th>\n                                                            <th>Qty</th>\n                                                            <th>Price</th>\n                                                        </tr>\n                                                    </MDBTableHead>\n                                                    <MDBTableBody>\n                                                        {lodash.range(1, rowCount + 1).map((id) =>\n                                                            <Row key={id}\n                                                                 id={id}\n                                                                 categoryComponent={this.categoryComponent}\n                                                                 productComponent={this.productComponent}\n                                                                 price={SelectedPrices[id - 1]}\n                                                                 onDelete={this.onDelete}\n                                                                 quantity={this.quantityComponent}\n                                                                 haveQty={SelectedHaveQty[id - 1]}\n                                                            />\n                                                        )\n                                                        }\n                                                    </MDBTableBody>\n                                                </MDBTable>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow>\n                                            <MDBCol sm=\"3\">\n                                                <MDBInput label=\"Subtotal \" value={subTotal} disabled type=\"number\" />\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow>\n                                            <MDBCol sm=\"3\">\n                                                <MDBInput label=\"Discount \" value={discount} type=\"number\"  onChange={val => {\n                                                    let disc = 0\n                                                    if (val.target.value !== '') {\n                                                        disc = parseInt(val.target.value);\n                                                    }\n                                                    const subTotal = this.computeSubtotal();\n                                                    const total = subTotal - disc;\n                                                    this.setState({discount: disc, subTotal, total})\n                                                }}/>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow>\n                                            <MDBCol sm=\"3\">\n                                                <MDBInput label=\"Total \" value={total} disabled type=\"number\" />\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <MDBRow>\n                                            <MDBCol sm=\"3\">\n                                                <MDBBtn onClick={this.onEnter}> Enter Bill </MDBBtn>\n                                            </MDBCol>\n                                        </MDBRow>\n                                    </div>\n                                    <div className=\"text-center mt-4\"/>\n                                </form>\n                            </MDBCardBody>\n                        </MDBCard>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default SalePage;","import React, {Component} from \"react\";\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nclass InvoiceTitle extends Component{\n    state = {}\n\n    styles = StyleSheet.create({\n\n        titleContainer:{\n            flexDirection: 'row',\n            marginTop: 24,\n        },\n        reportTitle:{\n            color: '#61dafb',\n            letterSpacing: 4,\n            fontSize: 25,\n            textAlign: 'center',\n            textTransform: 'uppercase',\n        }\n    });\n\n    render() {\n        const { title } = this.props;\n        return (\n            <View style={this.styles.titleContainer}>\n                <Text style={this.styles.reportTitle}>{title}</Text>\n            </View>\n        );\n    }\n}\n\nexport default InvoiceTitle;","import React, {Component} from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst styles = StyleSheet.create({\n    headerContainer: {\n        marginTop: 36\n    },\n    billTo: {\n        marginTop: 20,\n        paddingBottom: 3,\n        fontFamily: 'Helvetica-Oblique'\n    },\n});\n\n\nclass BillTo extends Component{\n    state = {}\n    render() {\n        const { invoice } = this.props\n        return (\n            <View style={styles.headerContainer}>\n                <Text style={styles.billTo}>Bill To:</Text>\n                <Text>{invoice.customerName}</Text>\n                {/*<Text>{invoice.address}</Text>*/}\n                {/*<Text>{invoice.phone}</Text>*/}\n                {/*<Text>{invoice.email}</Text>*/}\n            </View>\n        );\n    }\n}\n\nexport default BillTo","import React, {Component, Fragment} from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst styles = StyleSheet.create({\n    invoiceNoContainer: {\n        flexDirection: 'row',\n        marginTop: 36,\n        justifyContent: 'flex-end'\n    },\n    invoiceDateContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end'\n    },\n    invoiceDate: {\n        fontSize: 12,\n        fontStyle: 'bold',\n    },\n    label: {\n        width: 60\n    }\n\n});\n\n\nclass InvoiceNo extends Component{\n    state = {};\n\n    render() {\n        const { invoice } = this.props\n        return (\n            <Fragment>\n                <View style={styles.invoiceNoContainer}>\n                    <Text style={styles.label}>Invoice No:</Text>\n                    <Text style={styles.invoiceDate}>{invoice.invoice_no}</Text>\n                </View>\n                <View style={styles.invoiceDateContainer}>\n                    <Text style={styles.label}>Date: </Text>\n                    <Text>{invoice.date}</Text>\n                </View>\n            </Fragment>\n        );\n    }\n}\n\nexport default InvoiceNo","import React from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst borderColor = '#90e5fc'\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        borderBottomColor: '#bff0fd',\n        backgroundColor: '#bff0fd',\n        borderBottomWidth: 1,\n        alignItems: 'center',\n        height: 24,\n        textAlign: 'center',\n        fontStyle: 'bold',\n        flexGrow: 1,\n    },\n    description: {\n        width: '60%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n    },\n    qty: {\n        width: '10%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n    },\n    rate: {\n        width: '15%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n    },\n    amount: {\n        width: '15%'\n    },\n});\n\nconst InvoiceTableHeader = () => (\n    <View style={styles.container}>\n        <Text style={styles.description}>Item Description</Text>\n        <Text style={styles.qty}>Qty</Text>\n        <Text style={styles.rate}>@</Text>\n        <Text style={styles.amount}>Amount</Text>\n    </View>\n);\n\nexport default InvoiceTableHeader","import React, {Fragment} from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst borderColor = '#90e5fc'\nconst styles = StyleSheet.create({\n    row: {\n        flexDirection: 'row',\n        borderBottomColor: '#bff0fd',\n        borderBottomWidth: 1,\n        alignItems: 'center',\n        height: 24,\n        fontStyle: 'bold',\n    },\n    description: {\n        width: '60%',\n        textAlign: 'left',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n        paddingLeft: 8,\n    },\n    qty: {\n        width: '10%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n        textAlign: 'right',\n        paddingRight: 8,\n    },\n    rate: {\n        width: '15%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n        textAlign: 'right',\n        paddingRight: 8,\n    },\n    amount: {\n        width: '15%',\n        textAlign: 'right',\n        paddingRight: 8,\n    },\n});\n\n\nconst InvoiceTableRow = ({items}) => {\n    const rows = items.map( item =>\n        <View style={styles.row} key={item.sno.toString()}>\n            <Text style={styles.description}>{item.desc}</Text>\n            <Text style={styles.qty}>{item.qty}</Text>\n            <Text style={styles.rate}>{item.rate}</Text>\n            <Text style={styles.amount}>{(item.qty * item.rate).toFixed(2)}</Text>\n        </View>\n    )\n    return (<Fragment>{rows}</Fragment> )\n};\n\nexport default InvoiceTableRow","import React, {Fragment} from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst borderColor = '#90e5fc'\nconst styles = StyleSheet.create({\n    row: {\n        flexDirection: 'row',\n        borderBottomColor: '#bff0fd',\n        borderBottomWidth: 1,\n        alignItems: 'center',\n        height: 24,\n        fontStyle: 'bold',\n        color: 'white'\n    },\n    description: {\n        width: '60%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n    },\n    qty: {\n        width: '10%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n    },\n    rate: {\n        width: '15%',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n    },\n    amount: {\n        width: '15%',\n    },\n\n});\n\nconst InvoiceTableBlankSpace = ({rowsCount}) => {\n    const blankRows = Array(rowsCount).fill(0)\n    const rows = blankRows.map( (x, i) =>\n        <View style={styles.row} key={`BR${i}`}>\n            <Text style={styles.description}>-</Text>\n            <Text style={styles.qty}>-</Text>\n            <Text style={styles.rate}>-</Text>\n            <Text style={styles.amount}>-</Text>\n        </View>\n    )\n    return (<Fragment>{rows}</Fragment> )\n};\nexport default InvoiceTableBlankSpace;","import React from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst borderColor = '#90e5fc'\nconst styles = StyleSheet.create({\n    row: {\n        flexDirection: 'row',\n        borderBottomColor: '#bff0fd',\n        borderBottomWidth: 1,\n        alignItems: 'center',\n        height: 24,\n        fontSize: 12,\n        fontStyle: 'bold',\n    },\n    description: {\n        width: '85%',\n        textAlign: 'right',\n        borderRightColor: borderColor,\n        borderRightWidth: 1,\n        paddingRight: 8,\n    },\n    total: {\n        width: '15%',\n        textAlign: 'right',\n        paddingRight: 8,\n    },\n});\n\n\nconst InvoiceTableFooter = ({text, value}) => {\n    return(\n        <View style={styles.row}>\n            <Text style={styles.description}>{text}</Text>\n            <Text style={styles.total}>{ Number.parseFloat(value).toFixed(2)}</Text>\n        </View>\n    )\n};\n\nexport default InvoiceTableFooter","import React, {Component} from 'react';\nimport {View, StyleSheet } from '@react-pdf/renderer';\nimport InvoiceTableHeader from './InvoiceTableHeader'\nimport InvoiceTableRow from './InvoiceTableRow'\nimport InvoiceTableBlankSpace from './InvoiceTableBlankSpace'\nimport InvoiceTableFooter from './InvoiceTableFooter'\n\n\n\nclass InvoiceItemsTable extends Component {\n    state = {}\n\n    tableRowsCount = 6;\n\n    styles = StyleSheet.create({\n        tableContainer: {\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            marginTop: 24,\n            borderWidth: 1,\n            borderColor: '#bff0fd',\n        },\n    });\n\n\n    render() {\n        const { invoice } = this.props;\n        return (\n            <View style={this.styles.tableContainer}>\n                <InvoiceTableHeader />\n                <InvoiceTableRow items={invoice.items} />\n                <InvoiceTableBlankSpace rowsCount={1} />\n                <InvoiceTableFooter text=\"SUBTOTAL\" value={invoice.subTotal} />\n                <InvoiceTableFooter text=\"DISCOUNT\" value={invoice.discount} />\n                <InvoiceTableFooter text=\"TOTAL\" value={invoice.total} />\n            </View>\n        );\n    }\n}\n\nexport default InvoiceItemsTable","import React from 'react';\nimport {Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst styles = StyleSheet.create({\n\n    titleContainer:{\n        flexDirection: 'row',\n        marginTop: 12\n    },\n    reportTitle:{\n        fontSize: 12,\n        textAlign: 'center',\n        textTransform: 'uppercase',\n    }\n});\n\n\nconst InvoiceThankYouMsg = () => (\n    <View style={styles.titleContainer}>\n        <Text style={styles.reportTitle}>Thank you for your business</Text>\n    </View>\n);\n\nexport default InvoiceThankYouMsg","import React, {Component} from \"react\";\n\nimport {Document, Image, Page, StyleSheet, PDFViewer} from '@react-pdf/renderer';\nimport InvoiceTitle from \"./invoiceTitle\"\nimport BillTo from './BillTo'\nimport InvoiceNo from './InvoiceNo'\nimport InvoiceItemsTable from './InvoiceItemTable'\nimport InvoiceThankYouMsg from './InvoiceThankYouMsg'\nimport logo from '../../../logo.png'\nimport axios from \"axios\";\n\n\nclass Invoice extends Component {\n    state = {}\n\n    invoiceData = {\n        id: \"5f8920556ab6bcf247b2115c\",\n        invoice_no: \"202007-31\",\n        balance: \"$1,941.94\",\n        customerName: \"\",\n        email: \"haleyblake@voipa.com\",\n        phone: \"+1 (830) 481-3846\",\n        address: \"437 Manhattan Court, Babb, Mississippi, 7475\",\n        date: \"2019-09-01\",\n        subTotal: 0,\n        discount: 0,\n        total: 0,\n        items: []\n    }\n\n    styles = StyleSheet.create({\n        page: {\n            fontFamily: 'Helvetica',\n            fontSize: 11,\n            paddingTop: 30,\n            paddingLeft: 60,\n            paddingRight: 60,\n            lineHeight: 1.5,\n            flexDirection: 'column',\n        },\n        logo: {\n            width: 74,\n            height: 66,\n            marginLeft: 'auto',\n            marginRight: 'auto'\n        }\n    });\n\n    // static getDerivedStateFromProps(_, state) {\n    //     axios.post(\"http://localhost/spare_parts/session_checker.php\")\n    //         .then(value => {\n    //             if (value.data === \"no record found\") return null;\n    //             else if(value.data[0].status !== '1') {\n    //                 this.props.history.push(\"/login\");\n    //             }\n    //         })\n    // }\n\n\n    componentWillMount = async () => {\n        await axios.post(\"http://localhost/spare_parts/session_checker.php\")\n            .then(value => {\n                if (value.data === \"no record found\") return null;\n                else if(value.data[0].status !== '1') {\n                    this.props.history.push(\"/login\");\n                }\n            })\n    }\n\n    componentDidMount = () => {\n        axios.post(\"http://localhost/spare_parts/sales.php\", this.props.location.data).then(value => console.log(value));\n    }\n\n    render() {\n        let invoice  = this.invoiceData;\n        const {data} = this.props.location;\n        let {\n            subTotal,\n            discount,\n            total,\n            items,\n            customerName,\n            date,\n            time,\n        } = data;\n        // console.log(\"Message \",this.props.location.data);\n        invoice.items = items;\n        invoice.subTotal = subTotal;\n        invoice.discount = discount;\n        invoice.total = total;\n        invoice.customerName = customerName;\n        invoice.date = date;\n\n        return (\n            <PDFViewer width=\"1900\" height=\"1000\" className=\"app\" >\n                <Document>\n                    <Page size=\"A4\" style={this.styles.page}>\n                        <Image style={this.styles.logo} src={logo}/>\n                        <InvoiceTitle title='Invoice'/>\n                        <InvoiceNo invoice={invoice}/>\n                        <BillTo invoice={invoice}/>\n                        <InvoiceItemsTable invoice={invoice}/>\n                        <InvoiceThankYouMsg/>\n                    </Page>\n                </Document>\n            </PDFViewer>\n        );\n    }\n}\n\nexport default Invoice;","import React from \"react\";\nimport \"./App.css\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\n\nimport RoutesWithNavigation from \"./components/RoutesWithNavigation\";\n\nimport LoginPage from \"./spare_parts_components/pages/login\";\n\nimport SalePage from \"./spare_parts_components/pages/sale\";\n\nimport Invoice from \"./spare_parts_components/pages/billInvoice/invoice\";\n\n\nconst App = () => {\n    return (\n        <Switch>\n            <Route path=\"/login\" exact component={LoginPage}/>\n            <Route path=\"/sale\" exact component={SalePage}/>\n            <Route path=\"/invoice\" exact component={Invoice}/>\n            <RoutesWithNavigation/>\n            <Redirect to=\"/login\"/>\n        </Switch>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nconst customHistory = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={customHistory}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}